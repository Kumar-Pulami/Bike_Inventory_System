
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kumar
 */
public class Customer extends javax.swing.JFrame {

    /**
     * Creates new form Customer
     */
    String [][] appliancesInfoData; // store value from applianceInfo
    String[][] customereData={
                {"1", "Kawasakhi", "Ninja H2", "Sports", "Green", "500000"},
                {"2", "Yamaha", "YZF-R1M", "Sports", "Black", "550000"},
                {"3", "Dukati", "VS4", "Sports", "Red", "650000"},
                {"4", "Cross X", "250 SE", "Off-Road", "Orange", "600000"},
                {"5", "Honda", "XR 150L", "Off-Road", "Red", "600000"},
                {"6", "Crossfire", "NC250", "Off-Road", "Black", "550000"},
                {"7", "Hero ", "Splendor Plus", "Street", "Red", "300000"},
                {"8", "TVS", " XL100", "Street", "Brown", "350000"},
                {"9", "Bajaj ", "Discover 150", "Street", "Black", "250000"},
                {"10", "Kawasaki ", "z1000", "Nacked", "Brown", "600000"},
                {"11", "Ducati ", "Streetfighter V4 S", "Nacked", "Red", "500000"},
                {"12", "KTM", "Super Duke R", "Nacked", "Orange", "555000"},
                {"13", "Royal Enfield", "Meteor 350", "Cruisers", "Blue", "560000"},
                {"14", "Bajaj", "Avenger Cruise 220", "Cruisers", "Silver", "490000"},
                {"15", "Suzuki", "Intruder", "Cruisers", "Brown", "670000"}
            };    

    String [][] data;
    static boolean openedByAppliancesInfo = false;
    
    public Customer() {
        initComponents(); 
    }    

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        priceText = new javax.swing.JTextField();
        searchByPriceButton = new javax.swing.JButton();
        categoryComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        dublicateTable = new javax.swing.JTable();
        searchBycategoryButton = new javax.swing.JButton();
        displayAllInformationButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bike Information System");

        background.setPreferredSize(new java.awt.Dimension(830, 490));
        background.setLayout(null);

        priceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTextActionPerformed(evt);
            }
        });
        background.add(priceText);
        priceText.setBounds(50, 180, 127, 30);

        searchByPriceButton.setText("Search");
        searchByPriceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByPriceButtonActionPerformed(evt);
            }
        });
        background.add(searchByPriceButton);
        searchByPriceButton.setBounds(210, 180, 80, 31);

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Street", "Sports", "Nacked", "Cruisers", "Off-Road" }));
        categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboBoxActionPerformed(evt);
            }
        });
        background.add(categoryComboBox);
        categoryComboBox.setBounds(50, 90, 127, 30);

        dublicateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Kawasakhi", "Ninja H2", "Sports", "Green", "500000"},
                {"2", "Yamaha", "YZF-R1M", "Sports", "Black", "550000"},
                {"3", "Dukati", "VS4", "Sports", "Red", "650000"},
                {"4", "Cross X", "250 SE", "Off-Road", "Orange", "600000"},
                {"5", "Honda", "XR 150L", "Off-Road", "Red", "600000"},
                {"6", "Crossfire", "NC250", "Off-Road", "Black", "550000"},
                {"7", "Hero ", "Splendor Plus", "Street", "Red", "300000"},
                {"8", "TVS", " XL100", "Street", "Brown", "350000"},
                {"9", "Bajaj ", "Discover 150", "Street", "Black", "250000"},
                {"10", "Kawasaki ", "z1000", "Nacked", "Brown", "600000"},
                {"11", "Ducati ", "Streetfighter V4 S", "Nacked", "Red", "500000"},
                {"12", "KTM", "Super Duke R", "Nacked", "Orange", "555000"},
                {"13", "Royal Enfield", "Meteor 350", "Cruisers", "Blue", "560000"},
                {"14", "Bajaj", "Avenger Cruise 220", "Cruisers", "Silver", "490000"},
                {"15", "Suzuki", "Intruder", "Cruisers", "Brown", "670000"}
            },
            new String [] {
                "Bike Number", "Manufacturer", "Model", "Category", "Colour", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dublicateTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(dublicateTable);
        if (dublicateTable.getColumnModel().getColumnCount() > 0) {
            dublicateTable.getColumnModel().getColumn(0).setResizable(false);
            dublicateTable.getColumnModel().getColumn(1).setResizable(false);
            dublicateTable.getColumnModel().getColumn(2).setResizable(false);
            dublicateTable.getColumnModel().getColumn(3).setResizable(false);
            dublicateTable.getColumnModel().getColumn(4).setResizable(false);
            dublicateTable.getColumnModel().getColumn(5).setResizable(false);
        }

        background.add(jScrollPane2);
        jScrollPane2.setBounds(46, 235, 733, 219);

        searchBycategoryButton.setText("Appliances available in category");
        searchBycategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBycategoryButtonActionPerformed(evt);
            }
        });
        background.add(searchBycategoryButton);
        searchBycategoryButton.setBounds(213, 88, 220, 31);

        displayAllInformationButton.setText("Display All Information");
        displayAllInformationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllInformationButtonActionPerformed(evt);
            }
        });
        background.add(displayAllInformationButton);
        displayAllInformationButton.setBounds(600, 180, 160, 33);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Category Search");
        background.add(jLabel3);
        jLabel3.setBounds(46, 53, 130, 19);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Price Seach");
        background.add(jLabel5);
        jLabel5.setBounds(46, 148, 91, 19);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        background.add(clearButton);
        clearButton.setBounds(500, 180, 70, 31);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/Customer.png"))); // NOI18N
        background.add(jLabel1);
        jLabel1.setBounds(0, 0, 830, 490);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryComboBoxActionPerformed

    private void searchByPriceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByPriceButtonActionPerformed
        // this method is used to search bike based on the inserted price by user.        
        try{
            categoryComboBox.setSelectedItem("Select");
            String priceTxt=(priceText.getText()); // getting values from textfield.
            if(priceTxt.isEmpty()){ // if price is emptry then show suitable message
                JOptionPane.showMessageDialog(null,"Please enter the price to search.");
            }else if(Integer.parseInt(priceText.getText())>0){
                int price=Integer.parseInt(priceText.getText()); // converting string value into integer.                
                if(openedByAppliancesInfo){
                    data= appliancesInfoData;
                }else{
                    data= customereData;
                }
                 // sorting method from selectionSorting class sorts the values based on price in 2D array list.
                SelectionSorting.sorting(data); 
                
                // crearing all row.
                dublicateTable.setModel(new DefaultTableModel(null, new String []{"Bike Number", "Manufacturer", "Model","Category", "Colour", "Price"}));
                DefaultTableModel newModel = (DefaultTableModel) dublicateTable.getModel();
                
                // adding new row accroding to search.
                for(int i = 0; i < data.length; i++){
                  if(Integer.parseInt(data[i][5])==price){                       
                      newModel.addRow(new Object[] {data[i][0], data[i][1], data[i][2], data[i][3], data[i][4], data[i][5]});
                    }
                }              
                BinarySearch.search(data,price); // calling seach method from BinarySearch class to search the bike based on inserted price.
                
            }else{
                JOptionPane.showMessageDialog(null,"Please, enter the price greater than 0.");
            }           
        }catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(null,"Please, enter the price in number format.");
        }catch (ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }catch (Exception ex){
           JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_searchByPriceButtonActionPerformed

    private void searchBycategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBycategoryButtonActionPerformed
        // TODO add your handling code here:
        String selectedItem=(String) categoryComboBox.getSelectedItem();
        if(categoryComboBox.getSelectedItem().equals("Select")){
            JOptionPane.showMessageDialog(null, "Please, select the bike category.");
        }else{
            if(openedByAppliancesInfo){
                data=appliancesInfoData;
            }else{
                data=customereData;
            }
            dublicateTable.setModel(new DefaultTableModel(null, new String []{"Bike Number", "Manufacturer", "Model","Category", "Colour", "Price"}));
            DefaultTableModel newModel = (DefaultTableModel) dublicateTable.getModel();
            int totalValues=0;
            for(int i=0; i<data.length; i++){
                if(selectedItem.equals(data[i][3])){
                    newModel.addRow(new Object[] {data[i][0], data[i][1], data[i][2], data[i][3], data[i][4], data[i][5]});
                    totalValues++;
                } 
                
            }
            JOptionPane.showMessageDialog(null, "There are " +totalValues + " bikes avaliable in " + selectedItem + " category.");
        }
    }//GEN-LAST:event_searchBycategoryButtonActionPerformed

    private void priceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTextActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        categoryComboBox.setSelectedItem("Select");
        priceText.setText(null);        
    }//GEN-LAST:event_clearButtonActionPerformed

    private void displayAllInformationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllInformationButtonActionPerformed
        // TODO add your handling code here:
        if(openedByAppliancesInfo){
            data=appliancesInfoData;
        }else{
            data=customereData;
        }
        dublicateTable.setModel(new DefaultTableModel(null, new String []{"Bike Number", "Manufacturer", "Model","Category", "Colour", "Price"}));
        DefaultTableModel newModel = (DefaultTableModel) dublicateTable.getModel();
        for(int i=0; i<data.length; i++){
            newModel.addRow(new Object[] {data[i][0], data[i][1], data[i][2], data[i][3], data[i][4], data[i][5]});
        }
    }//GEN-LAST:event_displayAllInformationButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {                
            }
        });
    }     

    public static void openedByAppliancesInfo(){
        openedByAppliancesInfo=true;
    }
    
    public void setNewTableData(){
        String [][] temp=BikeInfo.getTableValue();
        appliancesInfoData=temp;
    }
    
    
    public void setTableModel(){
        TableModel temp=BikeInfo.getTableModel();
        dublicateTable.setModel(temp);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton displayAllInformationButton;
    private static javax.swing.JTable dublicateTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton searchByPriceButton;
    private javax.swing.JButton searchBycategoryButton;
    // End of variables declaration//GEN-END:variables
}
