
import java.awt.Desktop;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javafx.scene.control.Cell;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kumar
 */
public class BikeInfo extends javax.swing.JFrame{
    
    static boolean insertWindowStatus;
    static boolean updateWindowStatus;
    
    /**
     * Creates new form StaffWindow
     */
    public BikeInfo() {
        initComponents();         
    }   
    
    String [][] originalTableValue;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        informationTable = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        customerButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Import = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        userGuide = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bike Inventroy System");

        backgroundPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                backgroundPanelComponentAdded(evt);
            }
        });
        backgroundPanel.setLayout(null);

        informationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Kawasakhi", "Ninja H2", "Sports", "Green", "500000"},
                {"2", "Yamaha", "YZF-R1M", "Sports", "Black", "550000"},
                {"3", "Dukati", "VS4", "Sports", "Red", "650000"},
                {"4", "Cross X", "250 SE", "Off-Road", "Orange", "600000"},
                {"5", "Honda", "XR 150L", "Off-Road", "Red", "600000"},
                {"6", "Crossfire", "NC250", "Off-Road", "Black", "550000"},
                {"7", "Hero ", "Splendor Plus", "Street", "Red", "300000"},
                {"8", "TVS", " XL100", "Street", "Brown", "350000"},
                {"9", "Bajaj ", "Discover 150", "Street", "Black", "250000"},
                {"10", "Kawasaki ", "z1000", "Nacked", "Brown", "600000"},
                {"11", "Ducati ", "Streetfighter V4 S", "Nacked", "Red", "500000"},
                {"12", "KTM", "Super Duke R", "Nacked", "Orange", "555000"},
                {"13", "Royal Enfield", "Meteor 350", "Cruisers", "Blue", "560000"},
                {"14", "Bajaj", "Avenger Cruise 220", "Cruisers", "Silver", "490000"},
                {"15", "Suzuki", "Intruder", "Cruisers", "Brown", "670000"}
            },
            new String [] {
                "Bike Number", "Manufacturer", "Model", "Category", "Colour", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        informationTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(informationTable);
        if (informationTable.getColumnModel().getColumnCount() > 0) {
            informationTable.getColumnModel().getColumn(0).setResizable(false);
            informationTable.getColumnModel().getColumn(1).setResizable(false);
            informationTable.getColumnModel().getColumn(2).setResizable(false);
            informationTable.getColumnModel().getColumn(3).setResizable(false);
            informationTable.getColumnModel().getColumn(4).setResizable(false);
            informationTable.getColumnModel().getColumn(5).setResizable(false);
        }

        backgroundPanel.add(jScrollPane2);
        jScrollPane2.setBounds(140, 80, 743, 240);

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(insertButton);
        insertButton.setBounds(30, 80, 80, 34);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(updateButton);
        updateButton.setBounds(30, 150, 80, 34);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(deleteButton);
        deleteButton.setBounds(30, 220, 80, 34);

        customerButton.setText("Customer View");
        customerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(customerButton);
        customerButton.setBounds(760, 30, 120, 31);

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(exportButton);
        exportButton.setBounds(30, 290, 80, 31);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/solid_color_bright_lines_18572_2560x1440.png"))); // NOI18N
        backgroundPanel.add(jLabel1);
        jLabel1.setBounds(0, 0, 940, 360);

        File.setText("File");

        Import.setText("Import");
        Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportActionPerformed(evt);
            }
        });
        File.add(Import);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Help.setText("Help");

        userGuide.setText("User Guide");
        userGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userGuideActionPerformed(evt);
            }
        });
        Help.add(userGuide);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 919, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // TODO add your handling code here:
        if (insertWindowStatus){   
            JOptionPane.showMessageDialog(this,"Insert Window is already opened");
        }else if(updateWindowStatus){
            JOptionPane.showMessageDialog(this,"Update Window is already opened");                    
        }else{
            Insert insertWindow = new Insert();
            insertWindow.setVisible(true);
            insertWindow.pack();
            insertWindow.setLocationRelativeTo(null);             
            insertWindowStatus=true;
                     
            insertWindow.addWindowListener(new java.awt.event.WindowAdapter(){
                // overiding the window closing method for Insert Information Window.
                public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                    insertWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
                    insertWindowStatus=false;                    
                }
            });
        }        
    }//GEN-LAST:event_insertButtonActionPerformed

    public static void setterInsertWindowStatus(){
        insertWindowStatus = false;
    }
    
    public static void setterUpdateWindowStatus(){
        updateWindowStatus = false;
    }
   
    private void backgroundPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_backgroundPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_backgroundPanelComponentAdded
    
    public void removeRow(){
        int answer = JOptionPane.showConfirmDialog(null,"Do you want to delete selected row.", "Delete Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (answer==JOptionPane.YES_OPTION){            
            int selectedRow= informationTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) informationTable.getModel();
            model.removeRow(selectedRow); 
            JOptionPane.showMessageDialog(null,"Sucessfully Deleted.");
        }else{
            // Do nothing
        }
    }
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (insertWindowStatus){   
            JOptionPane.showMessageDialog(this,"Insert Window is already opened");
        }else if(updateWindowStatus){
            JOptionPane.showMessageDialog(this,"Update Window is already opened");                    
        }else{
            int selectedRows= informationTable.getSelectedRow();
            boolean isSelected = false;
            if (informationTable.getSelectionModel().isSelectionEmpty()){
                JOptionPane.showMessageDialog(this,"Please selecte the row in table to delete.");
            }else{
                isSelected= true;
            }            
            if (isSelected){
                int answer = JOptionPane.showConfirmDialog(null,"Do you want to delete selected row.", "Delete Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (answer==JOptionPane.YES_OPTION){            
                    int selectedRow= informationTable.getSelectedRow();
                    DefaultTableModel model = (DefaultTableModel) informationTable.getModel();
                    model.removeRow(selectedRow); 
                    JOptionPane.showMessageDialog(null,"Sucessfully Deleted.");
                }else{
                    // Do nothing
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if(updateWindowStatus){
            JOptionPane.showMessageDialog(this,"Update Window is already opened");
        }else if(insertWindowStatus){
            JOptionPane.showMessageDialog(this,"Insert Window is already opened");
        }else{
            int selectedRows= informationTable.getSelectedRow();
            boolean isSelected = false;
            if (informationTable.getSelectionModel().isSelectionEmpty()){
                JOptionPane.showMessageDialog(this,"Please selected the row in table to be updated.");
            }else{
                isSelected= true;
            }            
            if (isSelected){

                    Update updateWindow = new Update();
                    updateWindow.setVisible(true);
                    updateWindow.pack();
                    updateWindow.setLocationRelativeTo(null);             
                    updateWindowStatus=true;

                    // get selected row and its value.
                    int selectedRow= informationTable.getSelectedRow();
                    String bikeID=(String) informationTable.getValueAt(selectedRow, 0);
                    String manufacturer=(String) informationTable.getValueAt(selectedRow, 1);
                    String model=(String) informationTable.getValueAt(selectedRow, 2);
                    String category=(String) informationTable.getValueAt(selectedRow, 3);
                    String colour=(String) informationTable.getValueAt(selectedRow, 4);
                    String price=(String) informationTable.getValueAt(selectedRow, 5);

                    //set the values of seleted row in their respective field by calling method.
                    updateWindow.setValueAtField(bikeID, manufacturer, model, category, colour, price);

                    // overriding the closing method for update window.
                    updateWindow.addWindowListener(new java.awt.event.WindowAdapter(){
                        // overiding the window closing method for update Information Window.
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                            updateWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
                            updateWindowStatus=false;                 
                        }
                    });                  
                }
        }
    }//GEN-LAST:event_updateButtonActionPerformed


    private void customerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerButtonActionPerformed
        // TODO add your handling code here:
        if(updateWindowStatus){
            JOptionPane.showMessageDialog(this,"Close Update Window.");
        }else if(insertWindowStatus){
            JOptionPane.showMessageDialog(this,"Close Insert Window");
        }else{
            Customer customerWindow = new Customer();
            customerWindow.setVisible(true);
            customerWindow.openedByAppliancesInfo();
            customerWindow.setNewTableData();
            customerWindow.setTableModel();
            dispose();
            customerWindow.addWindowListener(new java.awt.event.WindowAdapter(){
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent) {

                    dispose();
                }
            });
        }         
    }//GEN-LAST:event_customerButtonActionPerformed


    private void ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportActionPerformed
        // TODO add your handling code here:
        String userDir = System.getProperty("user.home");
        JFileChooser fileChooser = new JFileChooser(new File (System.getProperty("user.home") + System.getProperty("file.separator")+ "Desktop"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text File","txt"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel File","xlsx", "xls"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV File","xlsx", "csv"));       
        int fileChoose = fileChooser.showOpenDialog(null);
        if (fileChoose == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if(file.getName().endsWith(".txt") || file.getName().endsWith(".csv")){
                try{
                    BufferedReader bufferreader=new BufferedReader(new FileReader(file));
                    String line;
                    while((line=bufferreader.readLine())!=null){
                        DefaultTableModel table = (DefaultTableModel) informationTable.getModel();
                        table.addRow(line.split(", ")); 
                    }
                    JOptionPane.showMessageDialog(null, "Data Imported Succesfully.!!");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(BikeInfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BikeInfo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(file.getName().endsWith("xls") || file.getName().endsWith("xlsx")){               
                FileInputStream excelFIS = null;
                BufferedInputStream excelBIS = null;
                XSSFWorkbook excelJTableImport = null;                 
                try{
                    excelFIS = new FileInputStream(file);
                    excelBIS = new BufferedInputStream(excelFIS);
                    excelJTableImport = new XSSFWorkbook(excelBIS);
                    XSSFSheet excelSheet = excelJTableImport.getSheetAt(0);
                    
                    for (int row = 0; row <=excelSheet.getLastRowNum(); row++) {
                        Row excelRow = excelSheet.getRow(row);                       
                        
                        int bikeID = (int) excelRow.getCell(0).getNumericCellValue();                        
                        String manufacturer = excelRow.getCell(1).getStringCellValue();                        
                        String model = excelRow.getCell(2).getStringCellValue();
                        String category = excelRow.getCell(3).getStringCellValue();
                        String colour = excelRow.getCell(4).getStringCellValue();
                        int price = (int) excelRow.getCell(5).getNumericCellValue();
                        for(int j=0; j<informationTable.getRowCount(); j++){
                            if(!toUpperCase(informationTable.getValueAt(j,1).toString()).equals(toUpperCase(manufacturer)) && !toUpperCase(informationTable.getValueAt(j,2).toString()).equals(toUpperCase(model))){
                                DefaultTableModel table = (DefaultTableModel) informationTable.getModel();
                                table.addRow(new Object[]{bikeID, manufacturer, model, category, colour, price});
                            }
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Data Imported Succesfully.!!");
                }catch (FileNotFoundException ex) {
                    Logger.getLogger(BikeInfo.class.getName()).log(Level.SEVERE, null, ex);
                }catch (IOException ex) {
                    Logger.getLogger(BikeInfo.class.getName()).log(Level.SEVERE, null, ex);                         
                }                  
            }else{
                JOptionPane.showMessageDialog(null, "File Format Not supported.");
            }   
        }        
    }//GEN-LAST:event_ImportActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
        try{
            if(updateWindowStatus){
                JOptionPane.showMessageDialog(this,"Close Update Window.");
            }else if(insertWindowStatus){
                JOptionPane.showMessageDialog(this,"Close Insert Window");
            }else{
                String userDir = System.getProperty("user.home");
                JFileChooser saveFile = new JFileChooser(new File (System.getProperty("user.home") + System.getProperty("file.separator")+ "Desktop"));
                saveFile.setFileFilter(new FileNameExtensionFilter("Text File", "txt"));
                saveFile.setAcceptAllFileFilterUsed(false);        
                int fileChoose = saveFile.showSaveDialog(null);
                if( fileChoose ==saveFile.APPROVE_OPTION){
                    File file = new File(saveFile.getSelectedFile()+".txt");
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    
                    for(int i=0; i<informationTable.getRowCount(); i++){
                        for(int j=0; j<informationTable.getColumnCount(); j++){
                            bw.write((String) informationTable.getModel().getValueAt(i,j));
                            if(j<5){
                                 bw.write(", ");
                            }                           
                        }
                    bw.write("\n");
                    }
                    bw.close();
                    fw.close();
                }
            } 
        }catch (IOException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }       
    }//GEN-LAST:event_exportButtonActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void userGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userGuideActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File("src/resource/userManual.pdf");
                Desktop.getDesktop().open(myFile);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
    }//GEN-LAST:event_userGuideActionPerformed

    public  static String [][] getTableValue(){
        DefaultTableModel model = (DefaultTableModel) informationTable.getModel();
        String tableData[][]= new String[model.getRowCount()][model.getColumnCount()];
        for (int i=0; i<model.getRowCount(); i++){
            for (int j = 0 ; j <model.getColumnCount(); j++){
               tableData[i][j]=(String) model.getValueAt(i,j); 
            }        
        }
        return tableData;
        
    }
    public static TableModel getTableModel(){
        return informationTable.getModel();
    }
    
    public static boolean insertInformation(String bikeNo, String manufacturer, String model, String category, String colour, String price){                  
        int totalRow = informationTable.getRowCount();        
        boolean duplicate = false;  
        boolean sucessfull = false;
        for(int i=0; i<=totalRow-1; i++){
            if(toUpperCase(informationTable.getValueAt(i,1).toString()).equals(toUpperCase(manufacturer)) && toUpperCase(informationTable.getValueAt(i,2).toString()).equals(toUpperCase(model))){
                duplicate= true;
                JOptionPane.showMessageDialog(null, "Duplicate Information Entry.");
            }else{
                if(toUpperCase(informationTable.getValueAt(i,0).toString()).equals(toUpperCase(bikeNo))){
                    JOptionPane.showMessageDialog(null, "Please enter unique Bike Number."); 
                    duplicate= true;
                }
            }
        }
        if(!duplicate){
            DefaultTableModel table = (DefaultTableModel) informationTable.getModel();
            table.addRow(new Object[]{bikeNo, manufacturer, model, category, colour, price});  
            sucessfull = true;
        }
        return sucessfull;
    }   
    
    public static boolean updateInformation(String bikeNo, String manufacturer, String model, String category, String colour, String price){ 
        boolean sucessfull = false;
        try{
            int totalRow = informationTable.getRowCount();
            int totalColumn = informationTable.getColumnCount();
            int selectedRow= informationTable.getSelectedRow();
            String [] value={bikeNo, manufacturer, model, category, colour, price};
            boolean duplicate = false;  
            
            if (toUpperCase(informationTable.getValueAt(selectedRow,0).toString()).equals(toUpperCase(bikeNo)) && toUpperCase(informationTable.getValueAt(selectedRow,1).toString()).equals(toUpperCase(manufacturer)) && toUpperCase(informationTable.getValueAt(selectedRow,2).toString()).equals(toUpperCase(model)) && toUpperCase(informationTable.getValueAt(selectedRow,3).toString()).equals(toUpperCase(category)) && toUpperCase(informationTable.getValueAt(selectedRow,4).toString()).equals(toUpperCase(colour)) && toUpperCase(informationTable.getValueAt(selectedRow,5).toString()).equals(toUpperCase(price))){
                JOptionPane.showMessageDialog(null, "Please change value to Update.");
                duplicate= true;
            }else{
                if(selectedRow>=1){
                    for(int j=0; j<=selectedRow-1; j++){
                        if(toUpperCase(informationTable.getValueAt(j,1).toString()).equals(toUpperCase(manufacturer)) && toUpperCase(informationTable.getValueAt(j,2).toString()).equals(toUpperCase(model))){
                            duplicate= true;
                            JOptionPane.showMessageDialog(null, "Duplicate Information Entry.");
                        }else{
                            if(toUpperCase(informationTable.getValueAt(j,0).toString()).equals(toUpperCase(bikeNo))){
                                JOptionPane.showMessageDialog(null, "Please enter unique Bike Number."); 
                                duplicate= true;
                            }
                        }
                    }
                }
                if(totalRow>selectedRow+1){    
                    for(int k=selectedRow+1; k<=totalRow-1; k++){
                        if(toUpperCase(informationTable.getValueAt(k,1).toString()).equals(toUpperCase(manufacturer)) && toUpperCase(informationTable.getValueAt(k,2).toString()).equals(toUpperCase(model))){
                            duplicate= true;
                            JOptionPane.showMessageDialog(null, "Duplicate Information Entry.");
                        }else{
                            if(toUpperCase(informationTable.getValueAt(k,0).toString()).equals(toUpperCase(bikeNo))){
                                JOptionPane.showMessageDialog(null, "Please enter unique Bike Number."); 
                                duplicate= true;
                            }
                        }
                    }
                }
            }                
            if(!duplicate){
                int answer = JOptionPane.showConfirmDialog(null,"Do you want to update selected Information.", "Update Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (answer==JOptionPane.YES_OPTION){  
                    for (int i=0; i<=totalColumn-1; i++){
                    informationTable.setValueAt(value[i], selectedRow, i);
                    sucessfull= true;
                    }
                }
            }           
        }catch (ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(null, ex);
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        return sucessfull;
    }  

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BikeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BikeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BikeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BikeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BikeInfo().setVisible(true);
            }
        });
    } 
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Import;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton customerButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exportButton;
    private static javax.swing.JTable informationTable;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton updateButton;
    private javax.swing.JMenuItem userGuide;
    // End of variables declaration//GEN-END:variables
}
